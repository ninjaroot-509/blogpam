# Generated by Django 3.0.7 on 2021-04-10 05:09

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessions', '0001_initial'),
        ('auth', '0015_auto_20210227_1626'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(default=None, max_length=255, null=True, verbose_name='Email')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('avatar_url', models.CharField(default=None, max_length=250, null=True)),
                ('bio', models.CharField(blank=True, default='', max_length=300, verbose_name='Bio')),
                ('last_visit', models.DateTimeField(default=None, null=True)),
                ('receive_email_alerts', models.BooleanField(default=True)),
                ('receive_newsletters', models.BooleanField(default=True)),
                ('last_alert_email_date', models.DateTimeField(default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('img_url', models.CharField(default=None, max_length=200, null=True)),
                ('content', models.CharField(default='', max_length=20000, verbose_name='Content')),
                ('created_on', models.DateTimeField()),
                ('modified_on', models.DateTimeField()),
                ('published_on', models.DateTimeField(default=None, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('is_subscribed', models.BooleanField(default=True)),
                ('score', models.FloatField(default=0.0, verbose_name='Engagement Score')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Name')),
                ('created_on', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Featured',
            fields=[
                ('info', models.CharField(blank=True, default=None, max_length=60, verbose_name='Info')),
                ('blog', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dscblog.Blog')),
                ('priority', models.IntegerField(default=0, verbose_name='Priority')),
            ],
        ),
        migrations.CreateModel(
            name='View',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referer', models.CharField(default=None, max_length=400, null=True, verbose_name='Referer Site')),
                ('score', models.FloatField(default=1.0, verbose_name='Engagement Score')),
                ('date', models.DateTimeField()),
                ('key', models.CharField(max_length=30, verbose_name='Key')),
                ('pingbacks', models.IntegerField(default=0)),
                ('last_pingback_date', models.DateTimeField(default=None, null=True)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='dscblog.Blog')),
                ('session', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='viewed', to='sessions.Session')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='viewed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('reaction', models.CharField(choices=[('LIK', 'Like'), ('LOV', 'Love'), ('LIT', 'Lit'), ('COL', 'Cool'), ('CLP', 'Clap')], default='LIK', max_length=3)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='dscblog.Blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reacted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'blog')},
            },
        ),
        migrations.CreateModel(
            name='Follower',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'target')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(blank=True, default='', max_length=300, verbose_name='Text')),
                ('date', models.DateTimeField()),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='dscblog.Blog')),
                ('reference', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='dscblog.Comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commented', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='blog',
            name='topics',
            field=models.ManyToManyField(related_name='blogs', to='dscblog.Topic'),
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seen', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('FL', 'follow'), ('CM', 'comment'), ('CR', 'comment reply'), ('NB', 'new blog'), ('RC', 'reaction')], default=None, max_length=2)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('blog', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dscblog.Blog')),
                ('comment', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dscblog.Comment')),
                ('follow', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dscblog.Follower')),
                ('reaction', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='dscblog.Reaction')),
                ('ref_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_refs', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
